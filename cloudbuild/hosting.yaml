steps:
  # Install
  #  - name: 'gcr.io/$PROJECT_ID/restore_cache'
  #    id: 'Restoring NPM modules cache'
  #    args:
  #      - --bucket=gs://${PROJECT_ID}_cloudbuild
  #      - --key=npm-build-cache-$( checksum package.json )-$( checksum package-lock.json )
  #      - --key_fallback=npm-build-cache-
  # Step 1: Download cached Node.js dependencies
  # Step 1: Check if package-lock.json changed
  - id: 'Check package-lock.json changes'
    name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: bash
    args:
      - '-c'
      - |
        if gsutil stat gs://${PROJECT_ID}-cache-dependencies/package-lock.json; then
          gsutil cp gs://${PROJECT_ID}-cache-dependencies/package-lock.json old-package-lock.json
          if cmp -s package-lock.json old-package-lock.json; then
            echo "false" >> /workspace/check.txt
          else
            echo "true" >> /workspace/check.txt
          fi
        else
          echo "true" >> /workspace/check.txt
        fi

  - id: 'Restoring NPM modules cache'
    name: gcr.io/cloud-builders/gsutil
    entrypoint: bash
    args:
      - '-c'
      - |
        gsutil cp gs://${PROJECT_ID}-cache-dependencies/npm-cache.tgz npm-cache.tgz || exit 0
        tar -zxf npm-cache.tgz --C /root/.npm || echo "No cache found"
    volumes:
      - name: 'npm-cache'
        path: /root/.npm

  - id: 'Installing NPM dependencies'
    name: 'node:$_NODE_VERSION'
    entrypoint: npm
    args:
      - ci
    volumes:
        - name: 'npm-cache'
          path: /root/.npm

#  - id: 'Saving .npm cache'
#    waitFor: [ 'Installing NPM dependencies' ]
#    name: gcr.io/cloud-builders/gsutil
#    entrypoint: bash
#    args:
#      - '-c'
#      - |
#        tar -zcf node-modules.tgz ./node_modules
#        gsutil cp node-modules.tgz gs://${PROJECT_ID}-cache-dependencies/cache/node-modules.tgz

#  - id: 'Saving .npm cache'
#    waitFor: [ 'Installing NPM dependencies' ]
#    name: gcr.io/cloud-builders/gsutil
#    entrypoint: bash
#    args:
#      - '-c'
#      - |
#        if [ "$(cat /workspace/check.txt)" == "true" ]; then
#          tar -zcf node-modules.tgz ./node_modules
#          gsutil cp node-modules.tgz gs://${PROJECT_ID}-cache-dependencies/cache/node-modules.tgz
#          gsutil cp package-lock.json gs://${PROJECT_ID}-cache-dependencies/package-lock.json
#        fi

  - id: 'Save npm cache'
    name: 'gcr.io/cloud-builders/gsutil'
    waitFor: [ 'Installing NPM dependencies' ]
    entrypoint: bash
    args:
      - '-c'
      - |
          tar -zcf npm-cache.tgz -C /root/.npm .
          gsutil cp npm-cache.tgz gs://${PROJECT_ID}-cache-dependencies/npm-cache.tgz
          gsutil cp package-lock.json gs://${PROJECT_ID}-cache-dependencies/package-lock.json
#        if [ "$(cat /workspace/check.txt)" == "true" ]; then
#        fi
    volumes:
      - name: 'npm-cache'
        path: /root/.npm




  #  - name: 'gcr.io/$PROJECT_ID/save_cache'
  #    id: 'Saving .npm cache'
  #    args:
  #      - --bucket=gs://${PROJECT_ID}_cloudbuild
  #      - --key=npm-build-cache-$( checksum package.json )-$( checksum package-lock.json )
  #      - --path=.npm
  #      - --no-clobber
  #    waitFor: [ 'Installing NPM dependencies' ]

  # Build
  - name: 'node:$_NODE_VERSION'
    entrypoint: npm
    args: [ 'run', 'build' ]
    # Deploy
  - name: 'gcr.io/$PROJECT_ID/firebase'
    args: [ 'deploy', '--only=hosting' ]

options:
  machineType: 'N1_HIGHCPU_8'
