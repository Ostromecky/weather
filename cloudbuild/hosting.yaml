steps:
  # Check if package-lock.json has changed
  - id: 'Check package-lock.json changes'
    name: 'gcr.io/cloud-builders/gsutil'
    entrypoint: bash
    args:
      - '-c'
      - |
        if gsutil stat gs://${PROJECT_ID}-cache-dependencies/package-lock.json; then
          gsutil cp gs://${PROJECT_ID}-cache-dependencies/package-lock.json old-package-lock.json
          if cmp -s package-lock.json old-package-lock.json; then
            echo "false" >> /workspace/check.txt
          else
            echo "true" >> /workspace/check.txt
          fi
        else
          echo "true" >> /workspace/check.txt
        fi

  - id: 'Restoring NPM modules cache'
    name: gcr.io/cloud-builders/gsutil
    entrypoint: bash
    args:
      - '-c'
      - |
        gsutil cp gs://${PROJECT_ID}-cache-dependencies/cache/node-modules.tgz node-modules.tgz || exit 0
        tar -zxf node-modules.tgz --directory /workspace || echo "No cache found"

#  - id: 'Installing NPM dependencies'
#    name: 'node:$_NODE_VERSION'
#    entrypoint: npm
#    args:
#      - ci

  - id: 'Installing NPM dependencies'
    name: 'curlimages/curl:latest' # Base image with curl
    entrypoint: bash
    env:
      - _NODE_VERSION=18 # Specify the desired Node.js version here
    args:
       - '-c'
       - |
        echo "Installing Node.js version $_NODE_VERSION..."
        curl -fsSL https://deb.nodesource.com/setup_${_NODE_VERSION}.x | bash - &&
        apt-get install -y nodejs &&
        echo "Node.js version: $(node -v)" &&
        echo "npm version: $(npm -v)"
        if [ "$(cat /workspace/check.txt)" == "true" ]; then
          echo "Condition met. Running npm ci..."
          npm ci
        else
          echo "Condition not met. Skipping npm ci."
        fi

  - id: 'Save npm cache'
    name: 'gcr.io/cloud-builders/gsutil'
    waitFor: [ 'Installing NPM dependencies' ]
    entrypoint: bash
    args:
      - '-c'
      - |
        if [ "$(cat /workspace/check.txt)" == "true" ]; then
          tar -zcf node-modules.tgz ./node_modules
          gsutil cp node_modules gs://${PROJECT_ID}-cache-dependencies/node_modules.tgz
          gsutil cp package-lock.json gs://${PROJECT_ID}-cache-dependencies/package-lock.json
        fi

  # Build
  - name: 'node:$_NODE_VERSION'
    entrypoint: npm
    args: [ 'run', 'build' ]
    # Deploy
  - name: 'gcr.io/$PROJECT_ID/firebase'
    args: [ 'deploy', '--only=hosting' ]

options:
  machineType: 'N1_HIGHCPU_8'
